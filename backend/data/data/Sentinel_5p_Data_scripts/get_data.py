import os
import json
import time
import shutil
import requests
import numpy as np
import pandas as pd
import xarray as xr 
import matplotlib.pyplot as plt
from pymongo import MongoClient
from shapely.geometry import Polygon
from dotenv import load_dotenv
from datetime import datetime, timedelta, timezone
# Getting Credentials
load_dotenv()

# Getting Area of intreset OGC WKT  https://boundingbox.klokantech.com/



username = os.getenv("COPERNICUS_USERNAME")  
password = os.getenv("COPERNICUS_PASSWORD")  

# Define all the variables for a specific gas 
def variables_function(gas):
    # Define here your Area of Interest (AIO) : Select your zone @ https://boundingbox.klokantech.com/ 
    footprint_aoi = "POLYGON((28.7 -33.6, 17.1 -32.0, 9.3 4.2, -7.4 5.4, -15.8 19.1, -6.0 35.6, 11.3 37.5, 21.0 32.5, 32.3 30.9, 44.4 10.4, 47.7 4.3, 38.5 -12.6, 28.7 -33.6))"
    username = os.getenv("COPERNICUS_USERNAME")  
    password = os.getenv("COPERNICUS_PASSWORD")  

    # Define the time range period
    # start_date = "2025-06-14T00:00:00Z" # YYYY(year)-MM(month)-DD(day)THH(hour):MM(minute):SS(second)Z
    # end_date = "2025-06-16T23:59:59Z"
    target_day = (datetime.now(timezone.utc) - timedelta(days=2)).date()
    start_date = f"{target_day}T00:00:00Z"
    end_date = f"{target_day}T23:59:59Z"

    # Define the download directory : it will be created if it doesn't exist
    download_dir = f"./data_sentinel_5p/{gas.lower()}_data" # Naming convention : download_dir = ./data_sentinel_5p/gas_data 

    # Define Sentinel search parameters
    satellite_name = 'SENTINEL-5P'
    p_name = f'L2__{gas}___'    # relevant parameters for atmospheric monitoring : CO, CH4, NO2, O3,SO2
    # Specify the number of images to search. The latest {image_nbr} images will be searched for and downloaded.
    image_nbr = 3
    return(username,password,satellite_name,p_name,footprint_aoi,start_date,end_date,download_dir,image_nbr)

# Authentification function (get token)
def refresh_token(username,password):
    auth_url = "https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token"
    auth_data = {
        "client_id": "cdse-public",
        "grant_type": "password",
        "username": username,
        "password": password
    }
    try:
        response = requests.post(auth_url, data=auth_data)
        response.raise_for_status()
        print("Authentication successful.")
        return response.json()["access_token"]
    except requests.RequestException as e:
        print(f" Authentication error. : {e}")
        return None

# search for products matching a name, date range, and location, and returns their unique IDs (A product is a satellite image or data file generated by a satellite mission)
def query_function(access_token,satellite_name,p_name,footprint_aoi,start_date,end_date, image_nbr):
    product_ids = []
    if access_token:
        search_url = "https://catalogue.dataspace.copernicus.eu/odata/v1/Products"
        # Build OData filter string
        filter_query = (
            f"Collection/Name eq '{satellite_name}' and "
            f"contains(Name, '{p_name}') and "
            f"OData.CSC.Intersects(Footprint, geography'SRID=4326;{footprint_aoi}') and "
            f"ContentDate/Start ge {start_date} and "
            f"ContentDate/Start le {end_date}"
        )

        query = {
            '$filter': filter_query,
            '$top': image_nbr,
            '$format': 'json'
        }
        headers = {"Authorization": f"Bearer {access_token}"}

        try:
            response = requests.get(search_url, params=query, headers=headers)
            response.raise_for_status()
            products = response.json()["value"]
            print(f"Found Sentinel products for the AOI : {len(products)}")
            if len(products) > 0:
                pass
                #print("Products found ")
                #print(json.dumps(products[0], indent=2))
            else:
                print("No product found")
        except requests.RequestException as e:
            print(f"Error : {e}")
    else:
        print("Invalid token")
    for elt in products:
        product_ids +=[elt['Id']]
    return(product_ids)

# Download the found products
def download_function(access_token,gas,product_list,download_dir):
    
    for product_id in product_list:
        download_url = f"https://download.dataspace.copernicus.eu/odata/v1/Products({product_id})/$value"
        headers = {"Authorization": f"Bearer {access_token}"}
        if not os.path.exists(download_dir):
            os.makedirs(download_dir)
            print(f"Download folder created : {download_dir}")
        output_path = os.path.join(download_dir, f"Sentinel5P_{gas}_{product_id}.nc")
        for attempt in range(2):
            try:
                print(f"Download of product Sentinel-5P (ID: {product_id})...")
                response = requests.get(download_url, headers=headers, stream=True)
                # Refresh Token if Authentification failed 
                if response.status_code == 401 and attempt == 0 :
                    print("Token expired. Refreshing token....")
                    access_token = refresh_token(os.getenv("COPERNICUS_USERNAME"), os.getenv("COPERNICUS_PASSWORD"))
                    headers["Authorization"] = f"Bearer {access_token}"
                    continue
                response.raise_for_status()
                with open(output_path, "wb") as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                print(f"Product entinel-5P with ID: {product_id} downloaded successfully at : {output_path}")
                break
            except requests.RequestException as e:
                print(f"Download Error : {e}")


# ==== Run All ==== #

def main():
    gases = ["CH4","CO","NO2", "O3", "SO2"]
    for gas in gases :
        username,password,satellite_name,p_name,footprint_aoi,start_date,end_date,download_dir,image_nbr = variables_function(gas)

        access_token = refresh_token(username,password)

        product_list = query_function(access_token,satellite_name,p_name,footprint_aoi,start_date,end_date,image_nbr)
        
        download_function(access_token,gas,product_list,download_dir)

# Execute main function
if __name__ == "__main__":
    main()
